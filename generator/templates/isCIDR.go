// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: templates/isCIDR.gohtml

package templates

import (
	"io"
	"strings"
)

// IsCIDR generates templates/isCIDR.gohtml
func IsCIDR() string {
	var _b strings.Builder
	RenderIsCIDR(&_b)
	return _b.String()
}

// RenderIsCIDR render templates/isCIDR.gohtml
func RenderIsCIDR(_buffer io.StringWriter) {
	_buffer.WriteString("\n// IsCIDRv4 is the validation function for validating if the field's value is a valid v4 CIDR address.\nfunc isCIDRv4(ref string) bool {\n\tip, _, err := net.ParseCIDR(ref)\n\n\treturn err == nil && ip.To4() != nil\n}\n\n// IsCIDRv6 is the validation function for validating if the field's value is a valid v6 CIDR address.\nfunc isCIDRv6(ref string) bool {\n\tip, _, err := net.ParseCIDR(ref)\n\n    // TODO\n\treturn err == nil && ip.To4() == nil\n}\n\n// IsCIDR is the validation function for validating if the field's value is a valid v4 or v6 CIDR address.\nfunc isCIDR(ref string) bool {\n\t_, _, err := net.ParseCIDR(ref)\n\n\treturn err == nil\n}\n\n// IsMAC is the validation function for validating if the field's value is a valid MAC address.\nfunc isMAC(ref string) bool {\n\t_, err := net.ParseMAC(ref)\n\n\treturn err == nil\n}\n\n// IsTCP4AddrResolvable is the validation function for validating if the field's value is a resolvable tcp4 address.\nfunc isTCP4AddrResolvable(ref string) bool {\n\n\tif !isIP4Addr(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveTCPAddr(\"tcp4\", ref)\n\treturn err == nil\n}\n\n// IsTCP6AddrResolvable is the validation function for validating if the field's value is a resolvable tcp6 address.\nfunc isTCP6AddrResolvable(ref string) bool {\n\n\tif !isIP6Addr(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveTCPAddr(\"tcp6\", ref)\n\n\treturn err == nil\n}\n\n// IsTCPAddrResolvable is the validation function for validating if the field's value is a resolvable tcp address.\nfunc isTCPAddrResolvable(ref string) bool {\n\n\tif !isIP4Addr(ref) && !isIP6Addr(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveTCPAddr(\"tcp\", ref)\n\n\treturn err == nil\n}\n\n// IsUDP4AddrResolvable is the validation function for validating if the field's value is a resolvable udp4 address.\nfunc isUDP4AddrResolvable(ref string) bool {\n\n\tif !isIP4Addr(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveUDPAddr(\"udp4\", ref)\n\n\treturn err == nil\n}\n\n// IsUDP6AddrResolvable is the validation function for validating if the field's value is a resolvable udp6 address.\nfunc isUDP6AddrResolvable(ref string) bool {\n\n\tif !isIP6Addr(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveUDPAddr(\"udp6\", ref)\n\n\treturn err == nil\n}\n\n// IsUDPAddrResolvable is the validation function for validating if the field's value is a resolvable udp address.\nfunc isUDPAddrResolvable(ref string) bool {\n\n\tif !isIP4Addr(ref) && !isIP6Addr(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveUDPAddr(\"udp\", ref)\n\n\treturn err == nil\n}\n\n// IsIP4AddrResolvable is the validation function for validating if the field's value is a resolvable ip4 address.\nfunc isIP4AddrResolvable(ref string) bool {\n\n\tif !isIPv4(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveIPAddr(\"ip4\", ref)\n\n\treturn err == nil\n}\n\n// IsIP6AddrResolvable is the validation function for validating if the field's value is a resolvable ip6 address.\nfunc isIP6AddrResolvable(ref string) bool {\n\n\tif !isIPv6(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveIPAddr(\"ip6\", ref)\n\n\treturn err == nil\n}\n\n// IsIPAddrResolvable is the validation function for validating if the field's value is a resolvable ip address.\nfunc isIPAddrResolvable(ref string) bool {\n\n\tif !isIP(ref) {\n\t\treturn false\n\t}\n\n\t_, err := net.ResolveIPAddr(\"ip\", ref)\n\n\treturn err == nil\n}\n\n// IsUnixAddrResolvable is the validation function for validating if the field's value is a resolvable unix address.\nfunc isUnixAddrResolvable(ref string) bool {\n\n\t_, err := net.ResolveUnixAddr(\"unix\", ref)\n\n\treturn err == nil\n}\n\nfunc isIP4Addr(ref string) bool {\n\n\tval := ref\n\n\tif idx := strings.LastIndex(val, \":\"); idx != -1 {\n\t\tval = val[0:idx]\n\t}\n\n\tip := net.ParseIP(val)\n\n\treturn ip != nil && ip.To4() != nil\n}\n\nfunc isIP6Addr(ref string) bool {\n\n\tval := ref\n\n\tif idx := strings.LastIndex(val, \":\"); idx != -1 {\n\t\tif idx != 0 && val[idx-1:idx] == \"]\" {\n\t\t\tval = val[1 : idx-1]\n\t\t}\n\t}\n\n\tip := net.ParseIP(val)\n\n\treturn ip != nil && ip.To4() == nil\n}\n\nfunc isFQDN(ref string) bool {\n\tval := ref\n\n\tif val == \"\" {\n\t\treturn false\n\t}\n\n\tif val[len(val)-1] == '.' {\n\t\tval = val[0 : len(val)-1]\n\t}\n\n\treturn strings.ContainsAny(val, \".\") && hostnameRegexRFC952.MatchString(val)\n}")

}

@{
	import (
		"strings"
		"github.com/lab259/go-my-ast-hurts"
		"github.com/lab259/go-thoth/generator/templates/errors"
	)
	var field *myasthurts.Field
	var tag myasthurts.TagParam
	var value interface{}
-}

@switch field.RefType.Name() {
	case "string":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType, *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderNil(_buffer, field, tag, value)
		}
	case "uint":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsUint", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "uint8":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsUint8", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "uint16":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsUint16", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "uint32":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsUint32", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "uint64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsUint64", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "uintptr":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsUintptr", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "int":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsInt", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "int8":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsInt8", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "int16":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsInt16", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "int32":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsInt32", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "int64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsInt64", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "float32":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsFloat32", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "float64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsFloat64", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "complex64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsComplex64", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	case "complex128":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			errors.RenderNumber(_buffer, "IsComplex128", field, tag, value)
		case *myasthurts.StarRefType:
			errors.RenderZero(_buffer, field, tag, value)
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	default:
		if strings.HasPrefix(field.RefType.Name(), "map") {
			switch field.RefType.(type) {
			case *myasthurts.BaseRefType:
				errors.RenderEmpty(_buffer, field, tag, value)
			case *myasthurts.StarRefType:
				errors.RenderNil(_buffer, field, tag, value)
			}
		} else {
			switch field.RefType.(type) {
			case *myasthurts.BaseRefType:
				if 	field.RefType.Type() != nil {
					@:if (@value == @field.RefType.Type().Name()@raw("{}")) {
					@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
					@:}
				} else {
					@:if IsValid(@value) {
					@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
					@:}
				}
			case *myasthurts.StarRefType:
				errors.RenderNil(_buffer, field, tag, value)
			case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
				errors.RenderEmpty(_buffer, field, tag, value)
			}
		}
}
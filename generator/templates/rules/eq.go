// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: templates/rules/eq.gohtml

package rules

import (
	"github.com/lab259/go-my-ast-hurts"
	"github.com/lab259/go-thoth/generator/templates/errors"
	"github.com/sipin/gorazor/gorazor"
	"io"
	"strings"
)

// Eq generates templates/rules/eq.gohtml
func Eq(field *myasthurts.Field, tag myasthurts.TagParam, value interface{}, args []string) string {
	var _b strings.Builder
	RenderEq(&_b, field, tag, value, args)
	return _b.String()
}

// RenderEq render templates/rules/eq.gohtml
func RenderEq(_buffer io.StringWriter, field *myasthurts.Field, tag myasthurts.TagParam, value interface{}, args []string) {
	switch field.RefType.Name() {
	case "string":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != \"")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString("\" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" == nil || * ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != \"")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString("\" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		}
	case "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "int", "int8", "int16", "int32", "int64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != ")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString(" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" == nil || * ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != ")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString(" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		}
	case "float32", "float64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != ")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString(" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" == nil || * ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != ")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString(" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		}
	case "complex64", "complex128":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != ")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString(" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {

				_buffer.WriteString("if ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" == nil || * ")
				_buffer.WriteString(gorazor.HTMLEscape(value))
				_buffer.WriteString(" != ")
				_buffer.WriteString(gorazor.HTMLEscape(args[0]))
				_buffer.WriteString(" {")

				_buffer.WriteString("\terrs = append(errs, NewError(\"")
				_buffer.WriteString(gorazor.HTMLEscape(field.Name))
				_buffer.WriteString("\", \"")
				_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
				_buffer.WriteString("\"))")

				_buffer.WriteString("}")

			}
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			errors.RenderEmpty(_buffer, field, tag, value)
		}
	default:
		if strings.HasPrefix(field.RefType.Name(), "map") {
			switch field.RefType.(type) {
			case *myasthurts.BaseRefType:
				errors.RenderEmpty(_buffer, field, tag, value)
			case *myasthurts.StarRefType:
				errors.RenderNil(_buffer, field, tag, value)
			}
		} else {
			switch field.RefType.(type) {
			case *myasthurts.BaseRefType:
				if field.RefType.Type() != nil {

					_buffer.WriteString("if (")
					_buffer.WriteString(gorazor.HTMLEscape(value))
					_buffer.WriteString(" == ")
					_buffer.WriteString(gorazor.HTMLEscape(field.RefType.Type().Name()))
					_buffer.WriteString(("{}"))
					_buffer.WriteString(") {")

					_buffer.WriteString("\terrs = append(errs, NewError(\"")
					_buffer.WriteString(gorazor.HTMLEscape(field.Name))
					_buffer.WriteString("\", \"")
					_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
					_buffer.WriteString("\"))")

					_buffer.WriteString("}")

				} else {

					_buffer.WriteString("if IsValid(")
					_buffer.WriteString(gorazor.HTMLEscape(value))
					_buffer.WriteString(") {")

					_buffer.WriteString("\terrs = append(errs, NewError(\"")
					_buffer.WriteString(gorazor.HTMLEscape(field.Name))
					_buffer.WriteString("\", \"")
					_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
					_buffer.WriteString("\"))")

					_buffer.WriteString("}")

				}
			case *myasthurts.StarRefType:
				errors.RenderNil(_buffer, field, tag, value)
			case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
				errors.RenderEmpty(_buffer, field, tag, value)
			}
		}
	}

}

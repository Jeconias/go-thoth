// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: templates/rules/eq.gohtml

package rules

import (
	"github.com/lab259/go-my-ast-hurts"
	"github.com/sipin/gorazor/gorazor"
	"io"
	"strings"
)

// Eq generates templates/rules/eq.gohtml
func Eq(input *EqInput) string {
	var _b strings.Builder
	RenderEq(&_b, input)
	return _b.String()
}

// RenderEq render templates/rules/eq.gohtml
func RenderEq(_buffer io.StringWriter, input *EqInput) {
	switch input.Field.RefType.Name() {
	case "string":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString("\" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " != " + input.Value.(string))
		case *myasthurts.StarRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" == nil || * ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString("\" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " == nil || * " + input.Ref + " != \"" + input.Value.(string) + "\"")
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

			_buffer.WriteString("panic(\"not implemented\")")

		}
	case "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "int", "int8", "int16", "int32", "int64":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString(" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			if c, ok := MapCondition[input.Ref]; ok {
				MapCondition[input.Ref] = (c + " || " + input.Ref + " == " + input.Value.(string))
			} else {
				MapCondition[input.Ref] = (input.Ref + " == " + input.Value.(string))
			}
		case *myasthurts.StarRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" == nil || * ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString(" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " == nil || * " + input.Ref + " != " + input.Value.(string))
		}
	case "float32", "float64":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString(" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " != " + input.Value.(string))
		case *myasthurts.StarRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" == nil || * ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString(" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " == nil || * " + input.Ref + " != " + input.Value.(string))
		}
	case "complex64", "complex128":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString(" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " != " + input.Value.(string))
		case *myasthurts.StarRefType:

			_buffer.WriteString("if ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" == nil || * ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Ref))
			_buffer.WriteString(" != ")
			_buffer.WriteString(gorazor.HTMLEscape(input.Value))
			_buffer.WriteString(" {")

			_buffer.WriteString("\terrs = append(errs, NewError(\"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Field.Name))
			_buffer.WriteString("\", \"")
			_buffer.WriteString(gorazor.HTMLEscape(input.Tag.Value))
			_buffer.WriteString("\"))")

			_buffer.WriteString("}")

			MapCondition[input.Ref] = (input.Ref + " == nil || * " + input.Ref + " != " + input.Value.(string))
		}
	default:

		_buffer.WriteString("panic(\"not implemented\")")

	}

}

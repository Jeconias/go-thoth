@{
	import (
		"strings"
		"github.com/lab259/go-my-ast-hurts"
	)
	var field *myasthurts.Field
	var tag myasthurts.TagParam
	var value interface{}
	var args []string
-}

@switch field.RefType.Name() {
	case "string":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {
				@:if @value != "@args[0]" {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {
				@:if @value == nil || * @value != "@args[0]" {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			@:panic("not implemented")
		}
	case "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "int", "int8", "int16", "int32", "int64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {
				@:if @value != @args[0] {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {
				@:if @value == nil || * @value != @args[0] {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		}
	case "float32", "float64":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {
				@:if @value != @args[0] {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {
				@:if @value == nil || * @value != @args[0] {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		}
	case "complex64", "complex128":
		switch field.RefType.(type) {
		case *myasthurts.BaseRefType:
			if len(args) == 1 {
				@:if @value != @args[0] {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		case *myasthurts.StarRefType:
			if len(args) == 1 {
				@:if @value == nil || * @value != @args[0] {
				@:	errs = append(errs, NewError("@field.Name", "@tag.Value"))
				@:}
			}
		}
	default:
		@:panic("not implemented")
}
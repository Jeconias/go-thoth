@{
	import (
		"strings"
		"github.com/lab259/go-my-ast-hurts"
	)
	var input *EqInput
-}

@switch input.Field.RefType.Name() {
	case "string":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:
			@:if @input.Ref != "@input.Value" {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" != "+input.Value.(string))
		case *myasthurts.StarRefType:
			@:if @input.Ref == nil || * @input.Ref != "@input.Value" {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" == nil || * "+input.Ref+" != \""+input.Value.(string)+"\"")
		case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:
			@:panic("not implemented")
		}
	case "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "int", "int8", "int16", "int32", "int64":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:
			@:if @input.Ref != @input.Value {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			if c, ok := Condition[input.Ref]; ok {
				Condition[input.Ref] = (c+" || "+input.Ref+" == "+input.Value.(string))
			} else {
				Condition[input.Ref] = (input.Ref+" == "+input.Value.(string))
			}
		case *myasthurts.StarRefType:
			@:if @input.Ref == nil || * @input.Ref != @input.Value {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" == nil || * "+input.Ref+" != "+input.Value.(string))
		}
	case "float32", "float64":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:
			@:if @input.Ref != @input.Value {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" != "+input.Value.(string))
		case *myasthurts.StarRefType:
			@:if @input.Ref == nil || * @input.Ref != @input.Value {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" == nil || * "+input.Ref+" != "+input.Value.(string))
		}
	case "complex64", "complex128":
		switch input.Field.RefType.(type) {
		case *myasthurts.BaseRefType:
			@:if @input.Ref != @input.Value {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" != "+input.Value.(string))
		case *myasthurts.StarRefType:
			@:if @input.Ref == nil || * @input.Ref != @input.Value {
			@:	errs = append(errs, NewError("@input.Field.Name", "@input.Tag.Value"))
			@:}
			Condition[input.Ref] = (input.Ref+" == nil || * "+input.Ref+" != "+input.Value.(string))
		}
	default:
		@:panic("not implemented")
}
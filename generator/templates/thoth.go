// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: templates/thoth.gohtml

package templates

import (
	"github.com/lab259/go-my-ast-hurts"
	"github.com/sipin/gorazor/gorazor"
	"io"
	"strings"
)

// Thoth generates templates/thoth.gohtml
func Thoth(fileName string, pkg *myasthurts.Package, structsThoth []*myasthurts.Struct) string {
	var _b strings.Builder
	RenderThoth(&_b, fileName, pkg, structsThoth)
	return _b.String()
}

// RenderThoth render templates/thoth.gohtml
func RenderThoth(_buffer io.StringWriter, fileName string, pkg *myasthurts.Package, structsThoth []*myasthurts.Struct) {
	_buffer.WriteString("\npackage ")
	_buffer.WriteString(gorazor.HTMLEscape(pkg.Name))
	for _, s := range structsThoth {

		_buffer.WriteString(("\n// Validate TODO\n"))

		_buffer.WriteString("func(")
		_buffer.WriteString(gorazor.HTMLEscape(strings.ToLower(s.Name()[0:1])))
		_buffer.WriteString(" ")
		_buffer.WriteString(("*"))
		_buffer.WriteString(gorazor.HTMLEscape(s.Name()))
		_buffer.WriteString(") Validate() (errs ValidationErrors) {")

		for _, field := range s.Fields {
			for _, tag := range field.Tag.Params {
				value := strings.ToLower(s.Name()[0:1]) + "." + field.Name
				switch tag.Value {
				case "required":
					switch field.RefType.Name() {
					case "string":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType, *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "uint":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsUint(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "uint8":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsUint8(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "uint16":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsUint16(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "uint32":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsUint32(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "uint64":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsUint64(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "uintptr":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsUintptr(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "int":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsInt(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "int8":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsInt8(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "int16":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsInt16(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "int32":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsInt32(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "int64":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsInt64(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "float32":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsFloat32(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "float64":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsFloat64(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "complex64":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsComplex64(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					case "complex128":
						switch field.RefType.(type) {
						case *myasthurts.BaseRefType:

							_buffer.WriteString("if IsComplex128(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(") {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.StarRefType:

							_buffer.WriteString("if ")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(" == nil {")

							_buffer.WriteString("\terrs = append(errs, ErrNumberRequired(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						case *myasthurts.ArrayRefType, *myasthurts.ChanRefType:

							_buffer.WriteString("if Empty(len(")
							_buffer.WriteString(gorazor.HTMLEscape(value))
							_buffer.WriteString(")) {")

							_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
							_buffer.WriteString(gorazor.HTMLEscape(field.Name))
							_buffer.WriteString("\", \"")
							_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
							_buffer.WriteString("\"))")

							_buffer.WriteString("}")

						}
					default:
						if strings.HasPrefix(field.RefType.Name(), "map") {
							switch field.RefType.(type) {
							case *myasthurts.BaseRefType:

								_buffer.WriteString("if Empty(len(")
								_buffer.WriteString(gorazor.HTMLEscape(value))
								_buffer.WriteString(")) {")

								_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
								_buffer.WriteString(gorazor.HTMLEscape(field.Name))
								_buffer.WriteString("\", \"")
								_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
								_buffer.WriteString("\"))")

								_buffer.WriteString("}")

							case *myasthurts.StarRefType:

								_buffer.WriteString("if ")
								_buffer.WriteString(gorazor.HTMLEscape(value))
								_buffer.WriteString(" == nil {")

								_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
								_buffer.WriteString(gorazor.HTMLEscape(field.Name))
								_buffer.WriteString("\", \"")
								_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
								_buffer.WriteString("\"))")

								_buffer.WriteString("}")

							}
						} else {
							switch field.RefType.(type) {
							case *myasthurts.BaseRefType:

								_buffer.WriteString("if IsValid(")
								_buffer.WriteString(gorazor.HTMLEscape(value))
								_buffer.WriteString(") {")

								_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
								_buffer.WriteString(gorazor.HTMLEscape(field.Name))
								_buffer.WriteString("\", \"")
								_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
								_buffer.WriteString("\"))")

								_buffer.WriteString("}")

							case *myasthurts.StarRefType:

								_buffer.WriteString("if ")
								_buffer.WriteString(gorazor.HTMLEscape(value))
								_buffer.WriteString(" == nil {")

								_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
								_buffer.WriteString(gorazor.HTMLEscape(field.Name))
								_buffer.WriteString("\", \"")
								_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
								_buffer.WriteString("\"))")

								_buffer.WriteString("}")

							case *myasthurts.ArrayRefType:

								_buffer.WriteString("if Empty(len(")
								_buffer.WriteString(gorazor.HTMLEscape(value))
								_buffer.WriteString(")) {")

								_buffer.WriteString("\terrs = append(errs, ErrEmpty(\"")
								_buffer.WriteString(gorazor.HTMLEscape(field.Name))
								_buffer.WriteString("\", \"")
								_buffer.WriteString(gorazor.HTMLEscape(tag.Value))
								_buffer.WriteString("\"))")

								_buffer.WriteString("}")

							}
						}
					}
				}

				_buffer.WriteString(("\n"))

			} // For tags
		} // For fields

		_buffer.WriteString("return errs")

		_buffer.WriteString("}")

	}

}

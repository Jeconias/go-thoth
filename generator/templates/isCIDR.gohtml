
// IsCIDRv4 is the validation function for validating if the field's value is a valid v4 CIDR address.
func isCIDRv4(ref string) bool {
	ip, _, err := net.ParseCIDR(ref)

	return err == nil && ip.To4() != nil
}

// IsCIDRv6 is the validation function for validating if the field's value is a valid v6 CIDR address.
func isCIDRv6(ref string) bool {
	ip, _, err := net.ParseCIDR(ref)

    // TODO
	return err == nil && ip.To4() == nil
}

// IsCIDR is the validation function for validating if the field's value is a valid v4 or v6 CIDR address.
func isCIDR(ref string) bool {
	_, _, err := net.ParseCIDR(ref)

	return err == nil
}

// IsMAC is the validation function for validating if the field's value is a valid MAC address.
func isMAC(ref string) bool {
	_, err := net.ParseMAC(ref)

	return err == nil
}

// IsTCP4AddrResolvable is the validation function for validating if the field's value is a resolvable tcp4 address.
func isTCP4AddrResolvable(ref string) bool {

	if !isIP4Addr(ref) {
		return false
	}

	_, err := net.ResolveTCPAddr("tcp4", ref)
	return err == nil
}

// IsTCP6AddrResolvable is the validation function for validating if the field's value is a resolvable tcp6 address.
func isTCP6AddrResolvable(ref string) bool {

	if !isIP6Addr(ref) {
		return false
	}

	_, err := net.ResolveTCPAddr("tcp6", ref)

	return err == nil
}

// IsTCPAddrResolvable is the validation function for validating if the field's value is a resolvable tcp address.
func isTCPAddrResolvable(ref string) bool {

	if !isIP4Addr(ref) && !isIP6Addr(ref) {
		return false
	}

	_, err := net.ResolveTCPAddr("tcp", ref)

	return err == nil
}

// IsUDP4AddrResolvable is the validation function for validating if the field's value is a resolvable udp4 address.
func isUDP4AddrResolvable(ref string) bool {

	if !isIP4Addr(ref) {
		return false
	}

	_, err := net.ResolveUDPAddr("udp4", ref)

	return err == nil
}

// IsUDP6AddrResolvable is the validation function for validating if the field's value is a resolvable udp6 address.
func isUDP6AddrResolvable(ref string) bool {

	if !isIP6Addr(ref) {
		return false
	}

	_, err := net.ResolveUDPAddr("udp6", ref)

	return err == nil
}

// IsUDPAddrResolvable is the validation function for validating if the field's value is a resolvable udp address.
func isUDPAddrResolvable(ref string) bool {

	if !isIP4Addr(ref) && !isIP6Addr(ref) {
		return false
	}

	_, err := net.ResolveUDPAddr("udp", ref)

	return err == nil
}

// IsIP4AddrResolvable is the validation function for validating if the field's value is a resolvable ip4 address.
func isIP4AddrResolvable(ref string) bool {

	if !isIPv4(ref) {
		return false
	}

	_, err := net.ResolveIPAddr("ip4", ref)

	return err == nil
}

// IsIP6AddrResolvable is the validation function for validating if the field's value is a resolvable ip6 address.
func isIP6AddrResolvable(ref string) bool {

	if !isIPv6(ref) {
		return false
	}

	_, err := net.ResolveIPAddr("ip6", ref)

	return err == nil
}

// IsIPAddrResolvable is the validation function for validating if the field's value is a resolvable ip address.
func isIPAddrResolvable(ref string) bool {

	if !isIP(ref) {
		return false
	}

	_, err := net.ResolveIPAddr("ip", ref)

	return err == nil
}

// IsUnixAddrResolvable is the validation function for validating if the field's value is a resolvable unix address.
func isUnixAddrResolvable(ref string) bool {

	_, err := net.ResolveUnixAddr("unix", ref)

	return err == nil
}

func isIP4Addr(ref string) bool {

	val := ref

	if idx := strings.LastIndex(val, ":"); idx != -1 {
		val = val[0:idx]
	}

	ip := net.ParseIP(val)

	return ip != nil && ip.To4() != nil
}

func isIP6Addr(ref string) bool {

	val := ref

	if idx := strings.LastIndex(val, ":"); idx != -1 {
		if idx != 0 && val[idx-1:idx] == "]" {
			val = val[1 : idx-1]
		}
	}

	ip := net.ParseIP(val)

	return ip != nil && ip.To4() == nil
}

func isFQDN(ref string) bool {
	val := ref

	if val == "" {
		return false
	}

	if val[len(val)-1] == '.' {
		val = val[0 : len(val)-1]
	}

	return strings.ContainsAny(val, ".") && hostnameRegexRFC952.MatchString(val)
}
// This file is generated by gorazor 2.0.1
// DON'T modified manually
// Should edit source file and re-generate: templates/isBitcoinAddress.gohtml

package templates

import (
	"io"
	"strings"
)

// IsBitcoinAddress generates templates/isBitcoinAddress.gohtml
func IsBitcoinAddress() string {
	var _b strings.Builder
	RenderIsBitcoinAddress(&_b)
	return _b.String()
}

// RenderIsBitcoinAddress render templates/isBitcoinAddress.gohtml
func RenderIsBitcoinAddress(_buffer io.StringWriter) {
	_buffer.WriteString("\nfunc isBitcoinAddress(address string) bool {\n\tif !btcAddressRegex.MatchString(address) {\n\t\treturn false\n\t}\n\n\talphabet := []byte(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")\n\n\tdecode := [25]byte{}\n\n\tfor _, n := range []byte(address) {\n\t\td := bytes.IndexByte(alphabet, n)\n\n\t\tfor i := 24; i >= 0; i-- {\n\t\t\td += 58 * int(decode[i])\n\t\t\tdecode[i] = byte(d % 256)\n\t\t\td /= 256\n\t\t}\n\t}\n\n\th := sha256.New()\n\t_, _ = h.Write(decode[:21])\n\td := h.Sum([]byte{})\n\th = sha256.New()\n\t_, _ = h.Write(d)\n\n\tvalidchecksum := [4]byte{}\n\tcomputedchecksum := [4]byte{}\n\n\tcopy(computedchecksum[:], h.Sum(d[:0]))\n\tcopy(validchecksum[:], decode[21:])\n\n\treturn validchecksum == computedchecksum\n}")

}
